generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model tattendance {
  id             Int                 @id @default(autoincrement())
  employee_id    Int?
  check_in_time  DateTime?           @db.Timestamp(0)
  check_out_time DateTime?           @db.Timestamp(0)
  status         tattendance_status? @default(checked_in)
  created_at     DateTime?           @default(now()) @db.Timestamp(0)
  updated_at     DateTime?           @default(now()) @db.Timestamp(0)
  temployees     temployees?         @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "tattendance_ibfk_1")

  @@index([employee_id], map: "employee_id")
}

model tcompanies {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  email                 String                  @unique(map: "email") @db.VarChar(255)
  profile_url           String?                 @db.Text
  overview              String?                 @db.Text
  status                tcompanies_status?      @default(active)
  created_at            DateTime?               @default(now()) @db.Timestamp(0)
  updated_at            DateTime?               @default(now()) @db.Timestamp(0)
  owner_id              Int?
  towner_company        towner_company?         @relation(fields: [owner_id], references: [id], onDelete: Cascade, map: "tcompanies_ibfk_1")
  tdepartements_company tdepartements_company[]
  temployees            temployees[]
  tsubscription         tsubscription[]
  tuser_company         tuser_company[]

  @@index([owner_id], map: "owner_id")
}

model tdepartements_company {
  id         Int                           @id @default(autoincrement())
  name       String                        @db.VarChar(255)
  overview   String?                       @db.Text
  status     tdepartements_company_status? @default(active)
  icons      String?                       @db.Text
  created_at DateTime?                     @default(now()) @db.Timestamp(0)
  updated_at DateTime?                     @default(now()) @db.Timestamp(0)
  company_id Int?
  tcompanies tcompanies?                   @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "tdepartements_company_ibfk_1")
  temployees temployees[]

  @@index([company_id], map: "company_id")
}

model temployees {
  id                    Int                    @id @default(autoincrement())
  first_name            String                 @db.VarChar(255)
  last_name             String                 @db.VarChar(255)
  email                 String                 @unique(map: "email") @db.VarChar(255)
  position              String?                @db.VarChar(255)
  profile_url           String?                @db.Text
  overview              String?                @db.Text
  status                temployees_status?     @default(active)
  created_at            DateTime?              @default(now()) @db.Timestamp(0)
  updated_at            DateTime?              @default(now()) @db.Timestamp(0)
  company_id            Int?
  department_id         Int?
  matricule_id          Int?
  tattendance           tattendance[]
  tcompanies            tcompanies?            @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "temployees_ibfk_1")
  tdepartements_company tdepartements_company? @relation(fields: [department_id], references: [id], map: "temployees_ibfk_2")
  tmatricule_employee   tmatricule_employee?   @relation(fields: [matricule_id], references: [id], map: "temployees_ibfk_3")
  ttime_off_requests    ttime_off_requests[]

  @@index([company_id], map: "company_id")
  @@index([department_id], map: "department_id")
  @@index([matricule_id], map: "matricule_id")
}

model tmatricule_employee {
  id         Int                         @id @default(autoincrement())
  matricule  String                      @db.VarChar(255)
  status     tmatricule_employee_status? @default(active)
  created_at DateTime?                   @default(now()) @db.Timestamp(0)
  updated_at DateTime?                   @default(now()) @db.Timestamp(0)
  temployees temployees[]
}

model towner_company {
  id                         Int                            @id @default(autoincrement())
  first_name                 String                         @db.VarChar(255)
  last_name                  String                         @db.VarChar(255)
  email                      String                         @unique(map: "email") @db.VarChar(255)
  password                   String                         @db.VarChar(255)
  phone_number               String?                        @db.VarChar(20)
  profile_url                String?                        @db.Text
  role_id                    Int?
  status                     towner_company_status?         @default(active)
  created_at                 DateTime?                      @default(now()) @db.Timestamp(0)
  updated_at                 DateTime?                      @default(now()) @db.Timestamp(0)
  email_verified             towner_company_email_verified? @default(non_verified)
  tcompanies                 tcompanies[]
  troles_users               troles_users?                  @relation(fields: [role_id], references: [id], map: "towner_company_ibfk_1")
  towner_email_verifications towner_email_verifications[]
  towner_password_resets     towner_password_resets[]

  @@index([role_id], map: "role_id")
}

model towner_email_verifications {
  id                Int            @id @default(autoincrement())
  owner_id          Int
  verification_code String         @db.VarChar(10)
  expires_at        DateTime       @db.Timestamp(0)
  verified          Boolean?       @default(false)
  created_at        DateTime?      @default(now()) @db.Timestamp(0)
  updated_at        DateTime?      @default(now()) @db.Timestamp(0)
  towner_company    towner_company @relation(fields: [owner_id], references: [id], onDelete: Cascade, map: "towner_email_verifications_ibfk_1")

  @@index([owner_id], map: "owner_id")
}

model towner_password_resets {
  id             Int            @id @default(autoincrement())
  owner_id       Int
  reset_token    String         @db.VarChar(255)
  expires_at     DateTime       @db.Timestamp(0)
  used           Boolean?       @default(false)
  created_at     DateTime?      @default(now()) @db.Timestamp(0)
  updated_at     DateTime?      @default(now()) @db.Timestamp(0)
  towner_company towner_company @relation(fields: [owner_id], references: [id], onDelete: Cascade, map: "towner_password_resets_ibfk_1")

  @@index([owner_id], map: "owner_id")
}

model tplans {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  price         Decimal?        @db.Decimal(10, 2)
  descriptions  String?         @db.Text
  max_users     Int?
  status        tplans_status?  @default(active)
  created_at    DateTime?       @default(now()) @db.Timestamp(0)
  updated_at    DateTime?       @default(now()) @db.Timestamp(0)
  tsubscription tsubscription[]
}

model troles_users {
  id             Int                  @id @default(autoincrement())
  role_names     String               @db.VarChar(255)
  status         troles_users_status? @default(active)
  created_at     DateTime?            @default(now()) @db.Timestamp(0)
  updated_at     DateTime?            @default(now()) @db.Timestamp(0)
  towner_company towner_company[]
  tuser_company  tuser_company[]
}

model troot_users {
  id         Int       @id @default(autoincrement())
  first_name String    @db.VarChar(255)
  last_name  String    @db.VarChar(255)
  email      String    @unique(map: "email") @db.VarChar(255)
  password   String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
}

model tsubscription {
  id                Int                   @id @default(autoincrement())
  company_id        Int?
  plan_id           Int?
  subscription_date DateTime?             @db.Date
  expiry_date       DateTime?             @db.Date
  status            tsubscription_status? @default(active)
  created_at        DateTime?             @default(now()) @db.Timestamp(0)
  updated_at        DateTime?             @default(now()) @db.Timestamp(0)
  tcompanies        tcompanies?           @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "tsubscription_ibfk_1")
  tplans            tplans?               @relation(fields: [plan_id], references: [id], map: "tsubscription_ibfk_2")

  @@index([company_id], map: "company_id")
  @@index([plan_id], map: "plan_id")
}

model ttime_off_requests {
  id            Int                        @id @default(autoincrement())
  employee_id   Int?
  start_date    DateTime?                  @db.Date
  end_date      DateTime?                  @db.Date
  status        ttime_off_requests_status? @default(pending)
  request_date  DateTime?                  @db.Date
  approved_by   Int?
  approval_date DateTime?                  @db.Date
  comments      String?                    @db.Text
  created_at    DateTime?                  @default(now()) @db.Timestamp(0)
  updated_at    DateTime?                  @default(now()) @db.Timestamp(0)
  temployees    temployees?                @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "ttime_off_requests_ibfk_1")

  @@index([employee_id], map: "employee_id")
}

model tuser_company {
  id           Int                   @id @default(autoincrement())
  first_name   String                @db.VarChar(255)
  last_name    String                @db.VarChar(255)
  email        String                @unique(map: "email") @db.VarChar(255)
  password     String                @db.VarChar(255)
  profile_url  String?               @db.Text
  status       tuser_company_status? @default(active)
  created_at   DateTime?             @default(now()) @db.Timestamp(0)
  updated_at   DateTime?             @default(now()) @db.Timestamp(0)
  role_id      Int?
  company_id   Int?
  troles_users troles_users?         @relation(fields: [role_id], references: [id], map: "tuser_company_ibfk_1")
  tcompanies   tcompanies?           @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "tuser_company_ibfk_2")

  @@index([company_id], map: "company_id")
  @@index([role_id], map: "role_id")
}

model user {
  id       Int    @id @default(autoincrement())
  email    String @unique(map: "User_email_key")
  password String
}

enum tmatricule_employee_status {
  active
  inactive
}

enum troles_users_status {
  active
  inactive
}

enum tdepartements_company_status {
  active
  inactive
}

enum tattendance_status {
  checked_in
  checked_out
  absent
}

enum ttime_off_requests_status {
  pending
  approved
  rejected
}

enum tcompanies_status {
  active
  inactive
  suspended
}

enum tplans_status {
  active
  inactive
}

enum tsubscription_status {
  active
  expired
  cancelled
}

enum tuser_company_status {
  active
  inactive
}

enum temployees_status {
  active
  inactive
  on_leave
}

enum towner_company_status {
  active
  inactive
  suspended
}

enum towner_company_email_verified {
  verified
  non_verified
}
